scale_y_log10() +
geom_jitter(aes(x = category, y = price), col = 'gray70') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
x = "Furniture Category",
y = "Price (log scale)",
title = "Ikea Furniture Category vs. Price"
)
ggplot(ikea) +
geom_point(aes(x = category, y = price), col = 'gray70') +
scale_y_log10() +
geom_jitter(aes(x = category, y = price), col = 'gray70') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
x = "Furniture Category",
y = "Price (log scale)",
title = "Ikea Furniture Category vs. Price"
)
ikea <- read_csv("https://uwmadison.box.com/shared/static/iat31h1wjg7abhd2889cput7k264bdzd.csv")
ggplot(ikea) +
geom_point(aes(x = category, y = price), col = 'gray70') +
scale_y_log10() +
geom_jitter(aes(x = category, y = price), col = 'gray70') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
x = "Furniture Category",
y = "Price (log scale)",
title = "Ikea Furniture Category vs. Price"
)
ikea$category = with(ikea, reorder(category, -price, mean))
ggplot(ikea) +
geom_point(aes(x = category, y = price), col = 'gray70') +
scale_y_log10() +
geom_jitter(aes(x = category, y = price), col = 'gray70') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
labs(
x = "Furniture Category",
y = "Price (log scale)",
title = "Ikea Furniture Category vs. Price"
)
highlight_df <- ikea %>%
filter(sellable_online == F)
ggplot(ikea) +
geom_point(aes(x = category, y = price), col = 'gray70') +
scale_y_log10() +
geom_jitter(aes(x = category, y = price), col = 'gray70') +
theme(axis.text.x = element_text(angle = 90, hjust = 1)) +
geom_point(data = highlight_df, aes(x = category, y = price), color = 'red') +
geom_label_repel(data = highlight_df, aes(x = category, y = price), label = highlight_df$name, col ='red3', size = 3, force = 2, max.overlaps = 20, fill = NA)+
labs(
x = "Furniture Category",
y = "Price (log scale)",
title = "Ikea Furniture Category vs. Price"
)
getwd()
library(dplyr)
install.packages("nycflights13")
library(nycflights13)
library(ggplot2)
flights
?flights
flights[,5:10]
colnames(flights)
str(flights)
# Select all flights on January 1st!
flights
# lots of old ways to do this.  here is what I would have done after learning about which:
flights[which(flights[,2] == 1 & flights[,3]==1),]
# with dplyr
filter(flights, month == 1, day == 1)
jan1 = filter(flights, month == 1, day == 1)
View(jan1)
filter(flights, month == 11 | month == 12)
filter(flights, day ==29 , month ==2 | carrier == "HA")
# a. Had an arrival delay of two or more hours
filter(flights, arrv_delay >=120) %>% View
# a. Had an arrival delay of two or more hours
filter(flights, arr_delay >=120) %>% View
# b. Flew to Houston (IAH or HOU)
flights &>& filter(dest == "IAH" | dest == "HOU")
# b. Flew to Houston (IAH or HOU)
flights %>% filter(dest == "IAH" | dest == "HOU")
# c. Were operated by United, American, or Delta
flights %>% fliter(carrier)
flights %>% filter(arr_delay >= 120)
# c. Were operated by United, American, or Delta
flights %>% filter(carrier == "United" | carrier== "American" | carrier == "Delta")
# c. Were operated by United, American, or Delta
flights %>% filter(carrier == "UA" | carrier== "American" | carrier == "Delta")
?flights
# c. Were operated by United, American, or Delta
flights %>% filter(carrier == "UA" | carrier== "AA" | carrier == "DL")
# d. Departed in summer (July, August, and September)
flights %>% filter(month == "7" | month == "8" | month == "9")
# e. Arrived more than two hours late, but didnâ€™t leave late
flights %>% filter(dep_delay == 0, arr_delay >= 120)
arrange(flights, year, month, day)
arrange(flights, month, day, desc(arr_delay))
arrange(flights, desc(arr_delay))
arrange(flights, desc(is.na(arr_delay)))
arrange(flights, arr_delay)
arrange(flights, arr_delay) %>% view
arrange(flights, arr_delay) %>% View
# change order of columns:
select(flights, time_hour, air_time, everything())
select(flights, contains("arr_") , contains("dep"))
select(flights, year:dep_time)
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours   #  <<<< you can reference variables that have alredy been made!
)
# how is transmute different?
# only keeps the variables that you define
transmute(flights,
gain = arr_delay - dep_delay,
hours = air_time / 60,
gain_per_hour = gain / hours
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
) %>% arrange(desc(gain))
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = arr_delay - dep_delay,
speed = distance / air_time * 60
) %>% arrange(desc(gain)) %>% View
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
) %>% arrange(desc(gain)) %>% View
flights_sml <- select(flights,
year:day,
ends_with("delay"),
distance,
air_time
)
mutate(flights_sml,
gain = dep_delay - arr_delay,
speed = distance / air_time * 60
) %>% arrange(desc(gain)) %>% View
# summarize takes a tibble or data frame and simplifies it to one row.
summarise(flights, delay = mean(dep_delay, na.rm = TRUE))
flights %>% group_by(origin) %>% summarize(mean(arr_delay, na.rm = T))
flights %>% group_by(origin) %>% summarize(mean(dep_delay, na.rm = T))
library(readr)
library(data.table)
bridges. = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/VI19.txt")
bridges_ = read_csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/VI19.txt")
bridgesf = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/VI19.txt")
View(bridges_)
View(bridges.)
View(bridgesf)
getwd()
setwd("~/STAT433-HW")
bridges1 = read.csv("AK19.csv")
View(bridges1)
bridges2 = read_csv("AK19.csv")
bridges3 = fread("AK19.csv")
head(bridges1)
head(bridges2)
head(bridges3)
bridges1 = read.csv("AK19.csv")
bridges2 = read_csv("AK19.csv")
bridges3 = fread("AK19.csv")
View(bridges2)
str(bridges1)
str(bridges2)
View(bridges3)
View(bridges1)
str(bridges3)
sum(is.na(bridges1))
sum(is.na(bridges2))
sum(is.na(bridges3))
delim = read_delim("https://www.fhwa.dot.gov/bridge/nbi/disclaim.cfm?nbiYear=2019&nbiState=AK19", delim = ",")
delim = read_delim("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt", delim = ",")
delim = read_delim("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt", delim = ",", quote = "'")
View(delim)
bridges1 = read.csv("AK19.csv")
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt")
View(bridgesA)
bridges2 = read_csv("AK19.csv")
bridgesB = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt")
bridges3 = fread("AK19.csv")
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt")
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt", header = T)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/AK19.txt", header = F)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
View(bridgesA)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = F)
View(bridgesA)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = F)
View(bridgesA)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
bridgesB = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
View(bridgesB)
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = F)
View(bridgesB)
View(bridgesC)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
head(bridgesA)
head(bridgesB)
head(bridgesC)
head(bridgesB)
head(bridgesB)
head(bridgesA)
head(bridgesC)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
bridgesB = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
View(bridgesC)
head(bridgesA = 6L)
head(bridgesA, n = 6L)
head(bridgesA, n = 3L)
head(bridgesA, n = c(3L, 3L))
head(bridgesA, n = c(3L, 6L))
head(bridgesA, n = c(3L, 6L))
head(bridgesB, n = c(3L, 6L))
head(bridgesC, n = c(3L, 6L))
View(bridgesC)
head(bridgesC)
head(bridgesC, n = c(3,6))
head(bridgesC, n = c(3L, 6L))
head(bridgesC, n = c(1L,1L))
head(bridgesC, n = c(1L))
head(bridgesC, n = c(1L), 1)
head(bridgesC, n = c(1L,1))
head(bridgesC, n = c(1L,1L))
head(bridgesC, n = c(1L))
head(bridgesC, n = c(2L))
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
save(bridgesB, file = "Bridges.RData")
load("C:/Users/bolzc/OneDrive/Documents/STAT433-HW/Bridges.RData")
load("~/STAT433-HW/Bridges.RData")
View(bridgesB)
write.csv(bridgesB, file = "Bridges.csv")
write.csv(bridgesC, file = "C.csv")
bridgesC
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
write.csv(bridgesC, file = "C.csv")
bridgesB = read_csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
bridgesA2 = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = F)
bridgesB = read_csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
write.csv(bridgesB, file = "A.csv")
write.csv(bridgesC, file = "B.csv")
write.csv(bridgesC, file = "C.csv")
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = T)
bridgesA2 = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt", header = F)
bridgesB = read_csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
bridgesC = fread("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
write.csv(bridgesA, file = "A.csv")
write.csv(bridgesA2, file = "A2.csv")
write.csv(bridgesB, file = "B.csv")
write.csv(bridgesC, file = "C.csv")
View(bridgesA2)
View(bridgesA2)
bridgesA = read.csv("https://www.fhwa.dot.gov/bridge/nbi/2019/delimited/AK19.txt")
str(bridgesA)
str(bridgesB)
str(bridgesC)
library(knitr)
library(readr)
library(ggplot2)
library(dplyr)
library(ggrepel)
library(ggridges)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(lubridate)
flights %>% filter(is.na(dep_time))
flights %>%  filter(complete.cases(dep_time), is.na(arr_time)) %>% View
flights$dep_time = (floor(flights$dep_time/100)*60 + flights$dep_time %% 100)
flights$sched_dep_time = (floor(flights$sched_dep_time/100)*60 +
flights$sched_dep_time %% 100)
# maybe also have mutate int here
sum(is.na(flights$dep_time))
sum(is.na(flights$arr_time))
flights %>%
mutate(day_of_year = yday(time_hour)) %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Delays per Day", y = "Proportion of Cancelled Flights per Day", title = "Average Delay vs Cancelled Flights")
flights %>% filter(is.na(arr_time))
flights %>%  filter(complete.cases(dep_time), is.na(arr_time)) %>% View
flights %>% filter(is.na(arr_time))
#flights %>%  filter(complete.cases(dep_time), is.na(arr_time)) %>% View
flights %>%  filter(complete.cases(dep_time), is.na(arr_time))
flights$dep_time = (floor(flights$dep_time/100)*60 + flights$dep_time %% 100)
flights$sched_dep_time = (floor(flights$sched_dep_time/100)*60 +
flights$sched_dep_time %% 100)
flights %>% filter(is.na(arr_time))
sum(is.na(flights$arr_time)) - sum(is.na(flights$dep_time))
library(dplyr)
library(nycflights13)
library(ggplot2)
library(lubridate)
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Delays per Day", y = "Proportion of Cancelled Flights per Day", title = "Average Delay vs Cancelled Flights")
8713/336776
View(flights)
library(dplyr)
library(nycflights13)
library(ggplot2)
library(lubridate)
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Delays per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights$arr_time = (floor(flights$sched_dep_time/100)*60 +
flights$sched_dep_time %% 100)
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Delays per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
library(dplyr)
library(nycflights13)
library(ggplot2)
library(lubridate)
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Delays per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>% mean(is.na(arr_time))
mean(is.na(flights$arr_time))
flights %>%
group_by(day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights") +geom_count()
flights %>%
group_by(day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
62/2
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T))
flights %>%
group_by(month, day) %>%
summarise.groups(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T)) %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'keep') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'drop_last') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'drop') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'keep') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'keep') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, colour = "dep_delay")) +
geom_point(aes(x = mean_arr, colour = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T))
hi = flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T))
View(hi)
flights %>%
group_by(month, day) %>%
summarise(cancelled = mean(is.na(arr_time)),
mean_dep = mean(dep_delay, na.rm = T),
mean_arr = mean(arr_delay, na.rm = T), .groups = 'keep') %>%
ggplot(aes(y = cancelled)) +
geom_point(aes(x = mean_dep, color = "dep_delay")) +
geom_point(aes(x = mean_arr, color = "arr_delay")) +
labs(x = "Average Delay per Day in Min", y = "Proportion of Cancelled Flights per Day",
title = "Average Delay vs Cancelled Flights")
