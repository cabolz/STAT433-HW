table4a  # columns are identifiers!
table4a %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
# here is another example:
table4b
table4b %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")
tidy4a <- table4a %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
tidy4b <- table4b %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "population")
left_join(tidy4a, tidy4b)
table2  # this has the "opposite problem"!
table2 %>%
pivot_wider(names_from = type, values_from = count)
# what changes:
stocks <- tibble(
year   = c(2015, 2015, 2016, 2016),
half  = c(   1,    2,     1,    2),
return = c(1.88, 0.59, 0.92, 0.17)
)
stocks %>%
pivot_wider(names_from = year, values_from = return) %>%
pivot_longer(`2015`:`2016`, names_to = "year", values_to = "return")
# why doesn't this run?
table4a %>%
pivot_longer(c(1999, 2000), names_to = "year", values_to = "cases")
# why doesn't this run?
table4a %>%
pivot_longer(c(`1999`, `2000`), names_to = "year", values_to = "cases")
#  is this data tidy?  why doesn't it pivot_wider?
people <- tribble(
~name,             ~key,    ~value,
#-----------------|--------|------
"Phillip Woods",   "age",       45,
"Phillip Woods",   "height",   186,
"Phillip Woods",   "age",       50,
"Jessica Cordero", "age",       37,
"Jessica Cordero", "height",   156
)
people
pivot_wider(people, names_from = key, values_from = value)
#Separate splits one column into two different columns
table3
table3 %>%
separate(rate, into = c("cases", "population"))  # sep is a regular expression!
table3 %>%
separate(rate, into = c("cases", "population"), sep = "/", convert=T)
table3 %>%
separate(year, into = c("century", "year"), sep = 2)
# Unite puts to columns together into a single column.
table5
table5 %>%
unite(new, century, year, sep = "")
table5 %>%
unite(year, century, year, sep = "")
# how many missing values?
stocks <- tibble(
year   = c(2015, 2015, 2015, 2015, 2016, 2016, 2016),
qtr    = c(   1,    2,    3,    4,    2,    3,    4),
return = c(1.88, 0.59, 0.35,   NA, 0.92, 0.17, 2.66)
)
stocks
# how many missing values?
stocks %>% pivot_wider(names_from = qtr,values_from = return)
# how many missing values?
stocks %>%
complete(year, qtr)
library(nycflights10)
library(nycflights)
library(nycflights13)
flights
library(tidyr)
library(dplyr)
library(ggplot2)
library(nycflights13)
flights
head(flights)
library(nycflights13)
library(dplyr)
# In addition to flights:
flights
# we have four related data frames:
airlines
airports
planes
weather
planes %>% filter(complete.cases(speed))
planes %>%
count(tailnum) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
weather %>%
count(year, month, day, hour, origin) %>%
filter(n > 1)
# what is primary key in flights?
flights %>% group_by(origin, month, day) %>% count(flight) %>% filter(n>1)
flights %>% filter(origin== "EWR", month == 1, day ==1, flight == 688)
# what is primary key in flights?
flights %>% group_by(origin, month, day, carrier) %>% count(flight) %>% filter(n>1)
# what is primary key in flights?
flights %>% group_by(month, day, carrier) %>% count(flight) %>% filter(n>1)
origin
# what is primary key in flights?
flights %>% group_by(origin, month, day, carrier) %>% count(flight) %>% filter(n>1)
# it's sometimes useful to add one with mutate() and row_number().
# That makes it easier to match observations if you've done some
# filtering and want to check back in with the original data.
# This is called a surrogate key.
flights %>% mutate(myKey = row_number()) %>% select(myKey, year:dest)
# for ease of display, make a narrower data set:
flights2 <- flights %>%
select(year:day, hour, origin, dest, tailnum, carrier)
flights2
flights2 %>%
select(-origin, -dest) %>%
left_join(airlines, by = "carrier")
flights2 %>%
select(-origin, -dest) %>%
mutate(name = airlines$name[match(carrier, airlines$carrier)])
(x <- tibble(key = c(1, 2, 3), val_x = c("x1", "x2", "x3")))
(y <- tibble(key = c(1, 2, 4), val_y = c("y1", "y2", "y3")))
x %>%
inner_join(y, by = "key")
x %>%
left_join(y, by = "key")
x %>%
right_join(y, by = "key")
x %>%
full_join(y, by = "key")
#  Duplicated keys!
#   are duplicated keys primary keys or foreign keys?
#   in flights data which keys are duplicated?
#   What do you *want* the join to do?
(x <- tibble(key = c(1, 2, 2, 1), val_x = stringr::str_c("x", 1:4)))
(y <- tibble(key = 1:2, val_y = stringr::str_c("y", 1:2)))
left_join(x, y, by = "key")
#  strange things happen if the primary key is duplicated (all combinations!)
(x <- tibble(key = c(1, 2, 2, 3), val_x = stringr::str_c("x", 1:4)))
(y <- tibble(key = c(1, 2, 2, 3), val_y = stringr::str_c("y", 1:4)))
left_join(x, y, by = "key")
weather
flights2 %>% left_join(weather)  # how does this join? no key defined!
flights2 %>% left_join(planes)  # how does this join? no key defined!
flights2 %>% left_join(planes, by ="tailnum")
flights2 %>% left_join(airports)
flights2 %>% left_join(airports, by = c("dest", "faa"))
flights2 %>% left_join(airports, by = c("dest" = "faa"))  # notice the syntax!!
flights2 %>% left_join(airports, c("origin" = "faa"))
# semi-join.
#   discard rows that don't have a match, but don't import any new columns.
airports
airports %>%
semi_join(flights, c("faa" = "dest"))
# anti-join.
#   discard rows that DO have a match.
flights %>%
anti_join(planes, by = "tailnum") %>%
count(tailnum, sort = TRUE)
flights2 %>% left_join(airports, c("origin" == "faa"))
flights2 %>% left_join(airports, c("origin" = "faa"))
# From
# https://socviz.co/makeplot.html#mappings-link-data-to-things-you-see
# https://socviz.co/assets/ch-03-ggplot-formula-schematic.png
install.packages("gapminder")
library(gapminder)
gapminder
p <- ggplot(data = gapminder)
library(ggplot2)
p <- ggplot(data = gapminder)
# The mapping = aes(...) argument links variables to things you will see on the plot.
# The x and y values are the most obvious ones.
# Other aesthetic mappings can include, for example, color, shape, size, and
# line type (whether a line is solid or dashed, or some other pattern). We'll
# see examples in a minute. A mapping does not directly say what particular,
# e.g., colors or shapes will be on the plot. Rather they say which variables
# in the data will be represented by visual elements like
# a color, a shape, or a point on the plot area.
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
# make the plot (it is still boring!)
p
p + geom_point()
p
p + geom_smooth()
p + geom_point() + geom_smooth()
p + geom_point() + geom_smooth(method = "lm")
p + geom_point() +
geom_smooth(method = "gam") +
scale_x_log10()
p + geom_point() +
geom_smooth(method = "gam") +
scale_x_log10(labels = scales::dollar)
p <-  ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp,
color = continent))
p + geom_point() +
geom_smooth(method = "loess") +
scale_x_log10(labels = scales::dollar)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(mapping = aes(color = continent)) +
geom_smooth(method = "loess") +
scale_x_log10(labels = scales::dollar)
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(alpha = 0.3) +
geom_smooth(color = "orange", se = FALSE, size = 8, method = "lm") +
scale_x_log10(labels = scales::dollar)
p + geom_point(alpha = 0.3) +
geom_smooth(color = "orange", se = FALSE, size = 2, method = "lm") +
scale_x_log10(labels = scales::dollar)
# Figure 3.13: A more polished plot of Life Expectancy vs GDP.
p <- ggplot(data = gapminder, mapping = aes(x = gdpPercap, y=lifeExp))
p + geom_point(alpha = 0.3) +
geom_smooth(method = "gam") +
scale_x_log10(labels = scales::dollar) +
labs(x = "GDP Per Capita", y = "Life Expectancy in Years",
title = "Economic Growth and Life Expectancy",
subtitle = "Data points are country-years",
caption = "Source: Gapminder.")
p <- ggplot(data = gapminder,
mapping = aes(x = gdpPercap,
y = lifeExp))
p + geom_point(mapping = aes(color = log(pop))) +
scale_x_log10(labels = scales::dollar)
#  vs
p + geom_point(mapping = aes(size = log10(pop))) +
scale_x_log10(labels = scales::dollar)
#  vs
p + geom_point(mapping = aes(alpha = log10(pop))) +
scale_x_log10(labels = scales::dollar)
#  vs
p + geom_point(mapping = aes(size = log10(pop)), alpha=.2) +
scale_x_log10(labels = scales::dollar)
p + geom_point(mapping = aes(color = log(pop))) +
scale_x_log10(labels = scales::dollar)
p + geom_point(mapping = aes(color = log(pop)), alpha = .2) +
scale_x_log10(labels = scales::dollar)
p
p + geom_point(mapping = aes(color = log(pop))) +
scale_x_log10(labels = scales::dollar)
p + geom_point(mapping = aes(color = log10(pop))) +
scale_x_log10(labels = scales::dollar)
p + geom_point(mapping = aes(color = log10(pop))) +
scale_x_log10(labels = scales::dollar) + facet_wrap(.~pop)
p + geom_point() +
scale_x_log10(labels = scales::dollar) + facet_wrap(.~pop)
p + geom_point() +
scale_x_log10(labels = scales::dollar) + facet_wrap(.~pop)
p + geom_point() +
scale_x_log10(labels = scales::dollar)
p + geom_point() +
scale_x_log10(labels = scales::dollar)
library(ggplot2)
library(dplyr)
mpg
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy))
mpg %>%  ggplot +
geom_point(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(.~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(.~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(class ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(.~ class)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ class)
library(tidyr)
library(dplyr)
library(ggplot2)
library(nycflights13)
planes
flights
planes
flights
flights2 <- flights %>%
select(tailnum, arr_delay)
flights %>%
left_join(airlines, by = "carrier")
planes
flights2 %>%
left_join(planes, by = "tailnum")
planes2 = planes %>% select(tailnum, year)
flights2 %>%
left_join(planes2, by = "tailnum")
flights
library(tidyr)
library(dplyr)
library(ggplot2)
library(nycflights13)
flights
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK")) %>%
mutate(month, day, EWR, LGA, JFK)
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, LGA, JFK)
library(tidyr)
library(dplyr)
library(ggplot2)
library(nycflights13)
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, LGA, JFK)
library(tidyr)
library(dplyr)
library(ggplot2)
library(nycflights13)
planes
flights
flights2 <- flights %>%
select(tailnum, arr_delay)
planes2 = planes %>% select(tailnum, year)
flights %>%
left_join(airlines, by = "carrier")
flights2 %>%
left_join(planes2, by = "tailnum")
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, LGA, JFK)
pr3 = flights %>%
mutate(day_of_year = date(time_hour)) %>%
group_by(day_of_year, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr=0))
head(pr3)
flights %>%
group_by(tailnum) %>%
summarise(mean_arr_ delay = mean(arr_delay, na.rm = T))
lights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T))
flights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(planes, by = c("")) %>%
select(tailnum:year)
flights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(planes) %>%
select(tailnum:year)
flights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(planes) %>%
select(tailnum:year)
pr1 = flights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(planes) %>%
select(tailnum:year)
head(pr1)
head(pr1, n = 10)
planes
flights
flights2 <- flights %>%
select(tailnum, arr_delay)
planes2 = planes %>% select(tailnum, year)
flights %>%
left_join(airlines, by = "carrier")
flights2 %>%
left_join(planes2, by = "tailnum")
flights %>%
group_by(origin, day, month) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
flights %>%
group_by(origin, month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, LGA, JFK)
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, LGA, JFK)
flights %>%
group_by(origin, month, day) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
flights %>% filter(origin == "LGA", month == 1,day == 3)
flights %>%
group_by(origin, month, day) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
LGA = sum(origin == "LGA"),
JFK = sum(origin == "JFK"), .groups = 'keep') %>%
mutate(month, day, EWR, JFK, LGA)
flights %>%
group_by(month, day) %>%
summarise(EWR = sum(origin == "EWR"),
JFK = sum(origin == "JFK"),
LGA = sum(origin == "LGA"),
.groups = 'keep') %>%
mutate(month, day, EWR, JFK, LGA)
flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(origin, date) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
flights %>% filter(origin == "LGA", month == 1,day == 3) # checking it is accurate
pr3 = flights %>%
mutate(day_of_year = date(time_hour)) %>%
group_by(day_of_year, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr=0))
pr3 = flights %>%
mutate(day_of_year = as.Date(time_hour)) %>%
group_by(day_of_year, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr=0))
head(pr3)
pr3 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(dest, date) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr=0))
head(pr3)
View(pr3)
pr3 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(date, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr=0))
head(pr3)
flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(origin, date) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
flights %>% filter(day == 1, month== 1, dest == "ALB")
pr3 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(date, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr = 0))
head(pr3, n = 10)
pr1 = flights %>%
group_by(tailnum) %>%
summarise(mean_arr_delay = mean(arr_delay, na.rm = T)) %>%
left_join(planes) %>%
select(tailnum:year)
head(pr1, n = 10)
pr2 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(origin, date) %>%
summarise(deps = n()) %>%
pivot_wider(names_from = origin, values_from = deps)
head(pr2, n = 10)
pr2 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(origin, date) %>%
summarise(deps = n(), .groups = 'keep') %>%
pivot_wider(names_from = origin, values_from = deps)
head(pr2, n = 10)
pr3 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(date, dest) %>%
summarise(num_arr = sum(!is.na(arr_time))) %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr = 0))
head(pr3, n = 10)
pr3 = flights %>%
mutate(date = as.Date(time_hour)) %>%
group_by(date, dest) %>%
summarise(num_arr = sum(!is.na(arr_time)), .groups = 'keep') %>%
pivot_wider(names_from = dest, values_from = num_arr, values_fill = list(num_arr = 0))
head(pr3, n = 10)
